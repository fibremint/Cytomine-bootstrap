#!/bin/bash

#
# Copyright (c) 2009-2018. Authors: see NOTICE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

echo "Starting Cytomine..."
echo "Configuration:"
echo "* Main URLs *"
echo "CORE_URL=$CORE_URL"
echo "IMS_URL=$IMS_URL"
echo "UPLOAD_URL=$UPLOAD_URL"
echo ""
echo "* Plugins *"
echo "BACKUP=$BACKUP_ENABLED"
echo "RETRIEVAL=$RETRIEVAL_ENABLED"
echo "IRIS=$IRIS_ENABLED"
echo "BIOFORMAT=$BIOFORMAT_ENABLED"
echo "SOFTWARE=$SOFTWARE_ENABLED"
echo "CORE_DEVELOPMENT=$CORE_DEVELOPMENT"
echo "IMS_DEVELOPMENT=$IMS_DEVELOPMENT"
echo "WEB_UI_DEVELOPMENT=$WEB_UI_DEVELOPMENT"
echo "BIOFORMAT_DEVELOPMENT=$BIOFORMAT_DEVELOPMENT"
echo ""
echo "* Container versions *"
echo "rabbitmq:$RABBITMQ_VERSION"
echo "$NGINX_NAMESPACE/nginx:$NGINX_VERSION"
if [[ $CORE_DEVELOPMENT = false ]]; then echo "$CORE_NAMESPACE/core:$CORE_VERSION"; fi
if [[ $WEB_UI_DEVELOPMENT = false ]]; then echo "$WEB_UI_NAMESPACE/web-ui:$WEB_UI_VERSION"; fi
echo "$POSTGRES_NAMESPACE/postgres:$POSTGRES_VERSION"
echo "$MONGODB_NAMESPACE/mongodb:$MONGODB_VERSION"
if [[ $BACKUP_ENABLED = true ]]; then echo "$BACKUP_NAMESPACE/backup:$BACKUP_VERSION"; fi
if [[ $PIMS_CACHE_ENABLED = true ]]; then echo "pims-cache:$PIMS_CACHE_VERSION"; fi
if [[ $IMS_DEVELOPMENT = false ]]; then echo "$IMS_NAMESPACE/pims:$IMS_VERSION"; fi
if [[ $IMS_DEVELOPMENT = false && $PIMS_TASK_QUEUE_ENABLED = true ]]; then echo "$IMS_NAMESPACE/pims-worker:$IMS_VERSION"; fi
if [[ $BIOFORMAT_ENABLED = true ]]; then echo "$BIOFORMAT_NAMESPACE/bioformat:$BIOFORMAT_VERSION"; fi
if [[ $RETRIEVAL_ENABLED = true ]]; then echo "$RETRIEVAL_NAMESPACE/retrieval:$RETRIEVAL_VERSION"; fi
if [[ $IRIS_ENABLED = true ]]; then echo "$IRIS_NAMESPACE/iris:$IRIS_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$SLURM_NAMESPACE/slurm:$SLURM_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$SOFTWAREROUTER_NAMESPACE/software_router:$SOFTWAREROUTER_VERSION"; fi
echo ""

# Create server SSH keys if needed
SERVER_SSHKEYS_FILE="$SERVER_SSHKEYS_PATH/id_rsa"
if [ ! -e $SERVER_SSHKEYS_FILE ]
then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        apt-get install -y ssh-keygen
    fi
    ssh-keygen -t rsa -N "" -C $CORE_URL -f $SERVER_SSHKEYS_FILE
fi


# ----- RABBITMQ -----
docker create --name ${INSTANCE_PREFIX}rabbitmq \
-p 5672:5672 -p 15672:15672 \
--hostname rabbitmq \
--restart=unless-stopped \
rabbitmq:$RABBITMQ_VERSION > /dev/null

docker cp "${PWD}/configs/rabbitmq/rabbitmq.conf" ${INSTANCE_PREFIX}rabbitmq:/etc/rabbitmq/rabbitmq.conf
docker start ${INSTANCE_PREFIX}rabbitmq



# ----- POSTGRESQL ------
docker volume create --name $POSTGRESQL_VOLUME > /dev/null
docker create --name ${INSTANCE_PREFIX}postgresql \
-p 5432:5432 \
-v $POSTGRESQL_VOLUME:/var/lib/postgresql/data \
-e PGDATA=/var/lib/postgresql/data/db-files/ \
--restart=unless-stopped \
$POSTGRES_NAMESPACE/postgres:$POSTGRES_VERSION postgres -c 'config_file=/tmp/postgresql.conf' > /dev/null

docker cp "${PWD}/configs/postgresql/postgresql.conf" ${INSTANCE_PREFIX}postgresql:/tmp/postgresql.conf
docker start ${INSTANCE_PREFIX}postgresql


# ----- MONGODB -----
docker volume create --name $MONGODB_VOLUME > /dev/null
docker run -d \
-p 27017:27017 -p 28017:28017 \
--name ${INSTANCE_PREFIX}mongodb \
-v $MONGODB_VOLUME:/data/db \
--restart=unless-stopped \
$MONGODB_NAMESPACE/mongodb:$MONGODB_VERSION > /dev/null


# ----- BACKUP POSTGRESQL -----
if [[ $BACKUP_ENABLED = true ]]
then
	# create backup docker
	docker run -d --name ${INSTANCE_PREFIX}backup_postgis --link ${INSTANCE_PREFIX}postgresql:db -v $BACKUP_PATH/postgis:/backup --restart=unless-stopped \
	-e SENDER_EMAIL=$SENDER_EMAIL \
	-e SENDER_EMAIL_PASS=$SENDER_EMAIL_PASS \
	-e SENDER_EMAIL_SMTP_HOST=$SENDER_EMAIL_SMTP_HOST \
	-e SENDER_EMAIL_SMTP_PORT=$SENDER_EMAIL_SMTP_PORT \
	-e RECEIVER_EMAIL=$RECEIVER_EMAIL \
	-e SGBD='postgres' \
	-e DATABASE='docker' \
	-e USER='docker' \
	-e PASSWD='docker' \
	$BACKUP_NAMESPACE/backup:$BACKUP_VERSION > /dev/null
fi


# ----- BACKUP MONGODB -----
if [[ $BACKUP_ENABLED = true ]]
then
	docker run -d --name ${INSTANCE_PREFIX}backup_mongo --link ${INSTANCE_PREFIX}mongodb:db -v $BACKUP_PATH/mongo:/backup --restart=unless-stopped \
	-e SGBD='mongodb' \
	-e SENDER_EMAIL=$SENDER_EMAIL \
	-e SENDER_EMAIL_PASS=$SENDER_EMAIL_PASS \
	-e SENDER_EMAIL_SMTP_HOST=$SENDER_EMAIL_SMTP_HOST \
	-e SENDER_EMAIL_SMTP_PORT=$SENDER_EMAIL_SMTP_PORT \
	-e RECEIVER_EMAIL=$RECEIVER_EMAIL \
	$BACKUP_NAMESPACE/backup:$BACKUP_VERSION > /dev/null
fi

# ----- RETRIEVAL -----
if [[ $RETRIEVAL_ENABLED = true ]]
then
    docker create --name ${INSTANCE_PREFIX}retrieval \
    -v $RETRIEVAL_PATH:/data/thumb \
    -e RETRIEVAL_ENGINE=$RETRIEVAL_ENGINE \
    -e RETRIEVAL_PASSWORD=$RETRIEVAL_PASSWORD \
    --restart=unless-stopped \
    $RETRIEVAL_NAMESPACE/retrieval:$RETRIEVAL_VERSION > /dev/null

    docker cp "${PWD}/hosts/retrieval/addHosts.sh" ${INSTANCE_PREFIX}retrieval:/tmp/addHosts.sh
    docker start ${INSTANCE_PREFIX}retrieval
fi


# ----- BIOFORMAT -----
if [[ $BIOFORMAT_ENABLED = true && $BIOFORMAT_DEVELOPMENT = false ]]
then
    docker create --name ${INSTANCE_PREFIX}bioformat \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
    -e BIOFORMAT_PORT=4321 \
    --restart=unless-stopped \
    $BIOFORMAT_NAMESPACE/bioformat:$BIOFORMAT_VERSION > /dev/null

    docker start ${INSTANCE_PREFIX}bioformat
fi

# ----- HMS -----
if [[ $HMS_ENABLED = true && $HMS_DEVELOPMENT = false ]]
then
    docker create --name ${INSTANCE_PREFIX}hms \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
    --restart=unless-stopped \
    $HMS_NAMESPACE/hms:$HMS_VERSION > /dev/null

    docker cp "${PWD}/configs/hms/config.cfg" ${INSTANCE_PREFIX}hms:/app/config.cfg
    docker cp "${PWD}/hosts/hms/addHosts.sh" ${INSTANCE_PREFIX}hms:/tmp/addHosts.sh
    docker start ${INSTANCE_PREFIX}hms
fi

# ----- PIMS CACHE ------
if [[ $PIMS_CACHE_ENABLED = true ]]
then
    docker create --name ${INSTANCE_PREFIX}pims-cache \
    -p 6379:6379 \
    --restart=unless-stopped \
    redis:$PIMS_CACHE_VERSION > /dev/null

    docker start ${INSTANCE_PREFIX}pims-cache
fi

# ----- IMS -----
if [[ $IMS_DEVELOPMENT = false ]]
then
    docker create --name ${INSTANCE_PREFIX}ims \
    --link ${INSTANCE_PREFIX}rabbitmq:rabbitmq \
    --link ${INSTANCE_PREFIX}bioformat:bioformat \
    --link ${INSTANCE_PREFIX}pims-cache:pims-cache \
    -e WEB_CONCURRENCY=$PIMS_WEB_CONCURRENCY \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
    -v $IMS_BUFFER_PATH:/tmp/uploaded \
    --restart=unless-stopped \
    $IMS_NAMESPACE/pims:$IMS_VERSION > /dev/null

    docker cp "${PWD}/configs/ims/pims-config.env" ${INSTANCE_PREFIX}ims:/app/pims-config.env
    docker cp "${PWD}/hosts/ims/addHosts.sh" ${INSTANCE_PREFIX}ims:/tmp/addHosts.sh
    docker start ${INSTANCE_PREFIX}ims

    if [[ $PIMS_TASK_QUEUE_ENABLED = true ]]
    then
        docker create --name ${INSTANCE_PREFIX}ims-worker \
        --link ${INSTANCE_PREFIX}rabbitmq:rabbitmq \
        --link ${INSTANCE_PREFIX}bioformat:bioformat \
        --link ${INSTANCE_PREFIX}pims-cache:pims-cache \
        -e WEB_CONCURRENCY=$PIMS_WORKER_WEB_CONCURRENCY \
        -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
        -v $IMS_BUFFER_PATH:/tmp/uploaded \
        --restart=unless-stopped \
        $IMS_NAMESPACE/pims-worker:$IMS_VERSION > /dev/null

        docker cp "${PWD}/configs/ims/pims-config.env" ${INSTANCE_PREFIX}ims-worker:/app/pims-config.env
        docker cp "${PWD}/hosts/ims/addHosts.sh" ${INSTANCE_PREFIX}ims-worker:/tmp/addHosts.sh
        docker start ${INSTANCE_PREFIX}ims-worker
    fi
fi


# ----- CORE -----
if [[ $CORE_DEVELOPMENT = false ]]
then
    docker create --name ${INSTANCE_PREFIX}core \
    --link ${INSTANCE_PREFIX}postgresql:postgresql \
    --link ${INSTANCE_PREFIX}mongodb:mongodb \
    --link ${INSTANCE_PREFIX}rabbitmq:rabbitmq \
    -v $ATTACHED_FILES_PATH:$ATTACHED_FILES_PATH \
    -v /etc/localtime:/etc/localtime \
    --restart=unless-stopped \
    $CORE_NAMESPACE/core:$CORE_VERSION > /dev/null

    if [ -e "${PWD}/artifacts/core.war" ]; then
        docker cp "${PWD}/artifacts/core.war" ${INSTANCE_PREFIX}core:/var/lib/tomcat7/webapps/ROOT.war
    fi

    if [ -e "${PWD}/artifacts/restapidoc.json" ]; then
        docker cp "${PWD}/artifacts/restapidoc.json" ${INSTANCE_PREFIX}core:/var/lib/tomcat7/restapidoc.json
    fi

    docker cp "${PWD}/configs/core/cytomineconfig.groovy" ${INSTANCE_PREFIX}core:/usr/share/tomcat7/.grails/cytomineconfig.groovy
    docker cp "${PWD}/hosts/core/addHosts.sh" ${INSTANCE_PREFIX}core:/tmp/addHosts.sh
    docker start ${INSTANCE_PREFIX}core
fi

# ----- WEB-UI -----
if [[ $WEB_UI_DEVELOPMENT = false ]]
then
    docker create --name ${INSTANCE_PREFIX}webUI \
    -v /etc/localtime:/etc/localtime \
    --restart=unless-stopped \
    $WEB_UI_NAMESPACE/web-ui:$WEB_UI_VERSION > /dev/null

    if [ -e "${PWD}/artifacts/web-ui" ]; then
    	docker cp "${PWD}/artifacts/web-ui/." ${INSTANCE_PREFIX}webUI:/app
    fi

    docker cp "${PWD}/configs/web-ui/configuration.json" ${INSTANCE_PREFIX}webUI:/app/configuration.json
    docker cp "${PWD}/configs/web-ui/nginx.conf" ${INSTANCE_PREFIX}webUI:/etc/nginx/nginx.conf
    docker start ${INSTANCE_PREFIX}webUI
fi

# ----- IRIS -----
if [[ $IRIS_ENABLED = true ]]
then
    docker volume create --name $IRIS_VOLUME > /dev/null
    docker create --name ${INSTANCE_PREFIX}iris \
    -v $IRIS_VOLUME:/var/lib/tomcat7/db \
    --restart=unless-stopped \
    $IRIS_NAMESPACE/iris:$IRIS_VERSION > /dev/null

    docker cp "${PWD}/configs/iris/iris-config.groovy" ${INSTANCE_PREFIX}iris:/usr/share/tomcat7/.grails/iris-config.groovy
    docker cp "${PWD}/configs/iris/iris-production-config.groovy" ${INSTANCE_PREFIX}iris:/usr/share/tomcat7/.grails/iris-production-config.groovy
    docker cp "${PWD}/hosts/iris/addHosts.sh" ${INSTANCE_PREFIX}iris:/tmp/addHosts.sh
    docker start ${INSTANCE_PREFIX}iris
fi

# ----- NGINX -----
docker create --name ${INSTANCE_PREFIX}nginx \
--link ${INSTANCE_PREFIX}iris:iris \
--link ${INSTANCE_PREFIX}ims:ims \
--link ${INSTANCE_PREFIX}ims-worker:ims-worker \
--link ${INSTANCE_PREFIX}retrieval:retrieval \
--link ${INSTANCE_PREFIX}core:core \
--link ${INSTANCE_PREFIX}webUI:webUI \
--link ${INSTANCE_PREFIX}hms:hms \
-v $IMS_BUFFER_PATH:/tmp/uploaded \
-v $CERTIFICATE_PATH:/certificates \
-p $HTTP_NGINX_PORT:80 \
-p $HTTPS_NGINX_PORT:443 \
--restart=unless-stopped \
$NGINX_NAMESPACE/nginx:$NGINX_VERSION > /dev/null

docker cp "${PWD}/configs/nginx/nginx.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/nginx.conf
docker cp "${PWD}/configs/nginx/server-core.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-core.conf
docker cp "${PWD}/configs/nginx/server-ims.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-ims.conf

if [[ $IRIS_ENABLED = true ]]; then docker cp "${PWD}/configs/nginx/server-iris.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-iris.conf; fi
if [[ $RETRIEVAL_ENABLED = true ]]; then docker cp "${PWD}/configs/nginx/server-retrieval.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-retrieval.conf; fi
if [[ $HMS_ENABLED = true ]]; then docker cp "${PWD}/configs/nginx/server-hms.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/server-hms.conf; fi
if [[ $WEB_UI_DEVELOPMENT = true ]]; then docker cp "${PWD}/configs/nginx/web-ui-dev-cors.conf" ${INSTANCE_PREFIX}nginx:/usr/local/nginx/conf/web-ui-dev-cors.conf; fi
docker start ${INSTANCE_PREFIX}nginx


# ----- SLURM -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    docker volume create --name $SLURM_VOLUME > /dev/null
    docker create --name ${INSTANCE_PREFIX}slurm -t -h cytomine-slurm \
    --privileged \
    -v $SLURM_VOLUME:/var/lib/mysql \
    -v $SERVER_SSHKEYS_PATH:$SERVER_SSHKEYS_PATH \
    -v $SOFTWARE_DOCKER_IMAGES_PATH:$SOFTWARE_DOCKER_IMAGES_PATH \
    -e SERVER_SSHKEYS_FILE=$SERVER_SSHKEYS_FILE \
    -p 10022:22 \
    --restart=unless-stopped \
    $SLURM_NAMESPACE/slurm:$SLURM_VERSION > /dev/null

    docker cp "${PWD}/hosts/slurm/addHosts.sh" ${INSTANCE_PREFIX}slurm:/tmp/addHosts.sh
    docker start ${INSTANCE_PREFIX}slurm
fi

# ----- SOFTWARE ROUTER -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    docker create --name ${INSTANCE_PREFIX}software_router \
    --link ${INSTANCE_PREFIX}rabbitmq:rabbitmq \
    --link ${INSTANCE_PREFIX}slurm:slurm \
    --privileged \
    -v $SOFTWARE_CODE_PATH:$SOFTWARE_CODE_PATH \
    -v $SOFTWARE_DOCKER_IMAGES_PATH:$SOFTWARE_DOCKER_IMAGES_PATH \
    -v $JOBS_PATH:$JOBS_PATH \
    -v $SERVER_SSHKEYS_PATH:$SERVER_SSHKEYS_PATH \
    --restart=unless-stopped \
    -p 22 \
    $SOFTWAREROUTER_NAMESPACE/software_router:$SOFTWAREROUTER_VERSION > /dev/null

    docker cp "${PWD}/hosts/software_router/addHosts.sh" ${INSTANCE_PREFIX}software_router:/tmp/addHosts.sh
    docker cp "${PWD}/configs/software_router/config.groovy" ${INSTANCE_PREFIX}software_router:/opt/config.groovy
    docker cp "${PWD}/configs/software_router/log4j.properties" ${INSTANCE_PREFIX}software_router:/opt/log4j.properties
    docker start ${INSTANCE_PREFIX}software_router
fi